# -*- coding: utf-8 -*-
"""Book Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NiC1BjBNVaUCbjgkWVa7jRKiW1oOp_cz
"""

!pip install requests pandas

import requests
import pandas as pd
from google.colab import files

api_key = "AIzaSyCrRp6gjQ9UpcON_6GUgsNyAavX8RhmOco"   # API key

def get_book_data(search_query, max_results=5000):
    """
    Fetches book data from the Google Books API.

    Args:
        search_query: The search term for books.
        max_results: The maximum number of results to retrieve (default is 5000).

    Returns:
        A pandas DataFrame containing book information, or None if an error occurs.
    """

    base_url = "https://www.googleapis.com/books/v1/volumes"
    params = {
        "q": search_query,
        "key": api_key,
        "maxResults": 40
    }

    all_book_data = []
    startIndex = 0
    total_items = 0

    try:
        while startIndex < min(max_results, 5000) and (startIndex < total_items or total_items == 0):
            params["startIndex"] = startIndex
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()

            if 'items' not in data:
                print("No items found in API response.")
                break

            items = data['items']
            total_items = data.get("totalItems", 0)

            for item in items:
                volume_info = item.get('volumeInfo', {})
                sale_info = item.get('saleInfo', {})

                book_info = {
                    'bookid': item.get('id', ''),
                    'searchkey': search_query,
                    'booktitle': volume_info.get('title', ''),
                    'booksubtitle': volume_info.get('subtitle', ''),
                    'bookauthors': ", ".join(volume_info.get('authors', [])),
                    'bookdescription': volume_info.get('description', ''),
                    'publisher': volume_info.get('publisher', ''),
                    'industryIdentifiers': ", ".join([identifier.get('identifier', '') for identifier in volume_info.get('industryIdentifiers', [])]),
                    'textreadingModes': volume_info.get('readingModes', {}).get('text', False),
                    'imagereadingModes': volume_info.get('readingModes', {}).get('image', False),
                    'pageCount': volume_info.get('pageCount', ''),
                    'categories': ", ".join(volume_info.get('categories', [])),
                    'language': volume_info.get('language', ''),
                    'imageLinks': str(volume_info.get('imageLinks', {})),
                    'ratingsCount': volume_info.get('ratingsCount', ''),
                    'averageRating': volume_info.get('averageRating', ''),
                    'country': sale_info.get('country', ''),
                    'saleability': sale_info.get('saleability', ''),
                    'isEbook': sale_info.get('isEbook', False),
                    'amountlistPrice': sale_info.get('listPrice', {}).get('amount', ''),
                    'currencyCode_listPrice': sale_info.get('listPrice', {}).get('currencyCode', ''),
                    'amountretailPrice': sale_info.get('retailPrice', {}).get('amount', ''),
                    'currencyCoderetailPrice': sale_info.get('retailPrice', {}).get('currencyCode', ''),
                    'buyLink': sale_info.get('buyLink', ''),
                    'year': volume_info.get('publishedDate', '').split('-')[0] if volume_info.get('publishedDate', '') else ''

                }
                all_book_data.append(book_info)


            startIndex += 40

        if not all_book_data:
            print("No book data found for the search query.")
            return None
        return pd.DataFrame(all_book_data)

    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return None



search_term = "novel, History" #@param {type:"string"}
df = get_book_data(search_term, max_results=5000)

if df is not None:
    print(df.head())
    print(f"Total books found: {len(df)}")

    file_name = f"books_{search_term.replace(' ', '_')}.csv"
    df.to_csv(file_name, index=False)
    files.download(file_name)

!pip install streamlit
!pip install mysql-connector-python
!pip install pyngrok
!npm install localtunnel
!pip install ngrok
!pip install requests pandas mysql-connector-python

#%%writefile book1.py

import requests
import mysql.connector
import pandas as pd
from google.colab import files
from requests.api import head
from mysql.connector import Error
from tabulate import tabulate
import streamlit as st
from PIL import Image
from pyngrok import ngrok



# Database connection details
mydb = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    port=4000,
    user="3nitUUKsZ9vMwCU.root",
    password="rXPvkXcel0MlnGKI",
    database="project",  # Use the correct database name
    autocommit=True
)

mycursor = mydb.cursor(buffered=True)

def run_query(query):
    try:
        mycursor.execute(query)
        results = mycursor.fetchall()
        columns = [i[0] for i in mycursor.description]
        df = pd.DataFrame(results, columns=columns)
        return df
    except mysql.connector.Error as err:
        st.error(f"Error executing query: {err}")
        return None

st.title('BookScape Explorer :book:')

# Search functionality
keyword = st.text_input("Search for books by keyword:")

# Question-specific queries
question = st.selectbox("Select a question:", [
    "1.Check Availability of eBooks vs Physical Books",    # 1
    "2.Find the Publisher with the Most Books Published",   # 2
    "3.Identify the Publisher with the Highest Average Rating",  #3
    "4.Get the Top 5 Most Expensive Books by Retail Price",  #4
    "5.Find Books Published After 2010 with at Least 500 Pages",  # 5
    "6.List Books with Discounts Greater than 20%",  #6
    "7.Find the Average Page Count for eBooks vs Physical Books", #7
    "8.Find the Top 3 Authors with the Most Books",  # 8
    "9.List Publishers with More than 10 Books", #9
    "10.Find the Average Page Count for Each Category", #10
    "11.Retrieve Books with More than 3 Authors",  #11
    "12.Books with Ratings Count Greater Than the Average",  #12
    "13.Books with the Same Author Published in the Same Year",  #13
    "14.Books with a Specific Keyword in the Title", #14
    "15.Year with the Highest Average Book Price", # 15
    "16.Count Authors Who Published 3 Consecutive Years", #16
    "17.Authors with books published in same year, different publishers", #17
    "18.Average retail price of ebooks and physical books",
    "19.Identify Books that are outliers",
    "20.Publisher with the highest average rating (more than 10 books)"
])

if question:
    if question == "1.Check Availability of eBooks vs Physical Books":   # 1 Question
        query = "SELECT isEbook, COUNT(*) AS book_count FROM books GROUP BY isEbook;"
        results_df = run_query(query)
        st.write(results_df)


    elif question == "2.Find the Publisher with the Most Books Published":   # 2 Question
        query = "SELECT publisher, COUNT(*) AS book_count FROM books GROUP BY publisher ORDER BY book_count DESC LIMIT 1;"
        results_df = run_query(query)
        st.write(results_df)

    elif question == "3.Identify the Publisher with the Highest Average Rating":  # 3 Question
        query = "SELECT publisher FROM books WHERE averageRating = (SELECT MAX(averageRating) FROM books);"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "4.Get the Top 5 Most Expensive Books by Retail Price":   # 4 Question
        query = "SELECT booktitle, amountretailPrice FROM books ORDER BY amountretailPrice DESC LIMIT 5;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "5.Find Books Published After 2010 with at Least 500 Pages":   #5 question
        query = "SELECT booktitle, year, pageCount FROM books WHERE year > 2010 AND pageCount >= 500;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "6.List Books with Discounts Greater than 20%":   # 6 Question
        query = "SELECT booktitle, (amountlistPrice - amountretailPrice) / amountlistPrice AS discount_percentage FROM books WHERE (amountlistPrice - amountretailPrice) / amountlistPrice > 0.02;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "7.Find the Average Page Count for eBooks vs Physical Books":  #7 Question
        query = "SELECT isEbook, AVG(pageCount) AS avg_page_count FROM books GROUP BY isEbook;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "8.Find the Top 3 Authors with the Most Books": #8 Question
        query = "SELECT bookauthors, COUNT(*) AS book_count FROM books GROUP BY bookauthors ORDER BY book_count DESC LIMIT 3;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "9.List Publishers with More than 10 Books": #9 Question
        query = "SELECT publisher, COUNT(*) AS book_count FROM books GROUP BY publisher HAVING book_count > 10;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "10.Find the Average Page Count for Each Category":  #10 Question
        query = "SELECT categories, AVG(pageCount) AS avg_page_count FROM books GROUP BY categories;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "11.Retrieve Books with More than 3 Authors":  #11 Question
        query = "SELECT booktitle, bookauthors FROM books WHERE LENGTH(bookauthors) - LENGTH(REPLACE(bookauthors, ',', '')) + 1 > 3;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "12.Books with Ratings Count Greater Than the Average":  #12 Question
        query = "SELECT booktitle, ratingsCount FROM books WHERE ratingsCount > (SELECT AVG(ratingsCount) FROM books);"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "13.Books with the Same Author Published in the Same Year": # 13 Question
        query = "SELECT bookauthors, year, COUNT(*) AS book_count FROM books GROUP BY bookauthors, year HAVING book_count > 1;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "15.Year with the Highest Average Book Price": # 15 Question
        query = "SELECT year, AVG(amountretailPrice) AS avg_price FROM books GROUP BY year ORDER BY avg_price DESC LIMIT 1;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "16.Count Authors Who Published 3 Consecutive Years": #16 Question
        query = "SELECT bookauthors FROM books GROUP BY bookauthors HAVING COUNT(DISTINCT year) >= 3 AND MAX(year) - MIN(year) = COUNT(DISTINCT year) - 1;"
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "17.Authors with books published in same year, different publishers": #17 Question
      query = """SELECT bookauthors, year, COUNT(*) AS book_count
      FROM books
      GROUP BY bookauthors, year
      HAVING COUNT(DISTINCT publisher) > 1;"""
      results_df = run_query(query)
      if results_df is not None:
        st.write(results_df)

    elif question == "18.Average retail price of ebooks and physical books":  # 18 Question
      query = """SELECT AVG(CASE WHEN isEbook = 1 THEN amountretailPrice ELSE NULL END) AS avg_ebook_price,
        AVG(CASE WHEN isEbook = 0 THEN amountretailPrice ELSE NULL END) AS avg_physical_price
        FROM books;"""
      results_df = run_query(query)
      if results_df is not None:
        st.write(results_df)

    elif question == "19.Identify Books that are outliers":  # 19 Question
      query = """SELECT booktitle, averageRating, ratingsCount
      FROM books
      WHERE averageRating > (SELECT AVG(averageRating) + 2 * STDDEV(averageRating) FROM books);"""
      results_df = run_query(query)
      if results_df is not None:
        st.write(results_df)

    elif question == "20.Publisher with the highest average rating (more than 10 books)": # 20 Question
        query = """SELECT publisher, AVG(averageRating) AS averageRating, COUNT(*) AS book_count
        FROM books
        GROUP BY publisher
        HAVING COUNT(*) > 10
        ORDER BY averageRating DESC
        LIMIT 1;"""
        results_df = run_query(query)
        if results_df is not None:
            st.write(results_df)

    elif question == "14.Books with a Specific Keyword in the Title": # 14 Question
        if keyword:
            query = f"SELECT * FROM books WHERE booktitle LIKE '%{keyword}%';"
            results_df = run_query(query)
            if results_df is not None:
                st.write(results_df)
        else:
            st.write("Please enter a keyword in the search box.")

# Set your ngrok auth token
from pyngrok import ngrok
ngrok.set_auth_token("2qZXTI70wbnYK9o4Ldi7bDiVMwX_6N2MUv8REzFnRsePg6zhh")


# Start ngrok tunnel
public_url = ngrok.connect(8501)
print(f"Streamlit app is live at: {public_url}")

# Run the Streamlit app
!streamlit run book1.py &>/dev/null&
